<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C语言学习笔记（4）</title>
    <link href="/2021/03/18/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%884%EF%BC%89/"/>
    <url>/2021/03/18/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%884%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="关于char类型"><a href="#关于char类型" class="headerlink" title="关于char类型"></a>关于char类型</h2><p>&emsp;&emsp;我们先从一道编程题开始讲起。</p><div class="note note-info">            <p>编程实现字母的大小写转换,要求从键盘输入任意大写字母,程序转换成小写字母并输出。</p>          </div><p>&emsp;&emsp;这是今天在上C语言课的时候，老师在课上布置的随堂练习。我自己一开始是打算用if判断来实现，但是非常的明显————使用逻辑判断语句来实现这个题目既复杂，又显的……emmm，有点蠢。所以我就“稍微”百度了一下。这里贴出这位老哥的做法：<br><a href="https://blog.csdn.net/qq_40757240/article/details/86552740">C语言实验题――大小写转换 从键盘输入一个大写字母，要求改用小写字母输出。</a></p><p>&emsp;&emsp;为了方便查看和说明，我将上面链接当中的代码展示在下方。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#include&lt;stdio.h&gt;</span><br>int main()<br>&#123;<br>char ch;<br>ch=getchar();<br>//这里并没有检验这个是不是字母<br>putchar(ch+32);<br><span class="hljs-built_in">return</span> 0;<br>&#125; <br></code></pre></div></td></tr></table></figure><h3 id="初识char"><a href="#初识char" class="headerlink" title="初识char"></a>初识char</h3><p>&emsp;&emsp;先简单说明一下，char属于C语言当中的一种常见的数据类型，即字符类型。</p><p>&emsp;&emsp;以下文字取于书本原文：</p><div class="note note-info">            <p>“字符类型包含字母、数字、标点符号以及控制符号等，在内存当中是以整数数值的方式来存储的，每一个字符占用1个字节（8个二进制位）的数据长度，所以字符ASCII编码的数值范围在0~127之间。例如字符‘A’的数值为65、字符‘0’的数值为48。”</p>          </div><p>&emsp;&emsp;其实说白了，char类型就负责在C语言当中对字符的处理。字符类型也有char、signed char和unsigned char这三种。</p><h3 id="char的使用"><a href="#char的使用" class="headerlink" title="char的使用"></a>char的使用</h3><p>&emsp;&emsp;在C语言当中使用char时，需要这样表达。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">char ch=<span class="hljs-string">&#x27;a&#x27;</span> //声明ch为字符变量，并设置初始值为<span class="hljs-string">&#x27;a&#x27;</span><br></code></pre></div></td></tr></table></figure><p>&emsp;这一语句的意思是在声明一个字符变量，变量的名字为“ch”,它被设置的初始值为a。</p><div class="note note-danger">            <p>注意：在为字符变量赋值的时候，使用的是单引号<span class="label label-info">‘’</span>，而不是双引号<span class="label label-danger">“”</span>!</p>          </div><p>&emsp;&emsp;在赋值的时候，除了直接使用字符，我们也可以利用ASCII码赋值，例如上面那一行我们还可以写成如下形式：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">char ch=65; //声明ch为字符变量，并设置初始值为65<br></code></pre></div></td></tr></table></figure><p>&emsp;&emsp;当然了，同理，我们还可以这样来表示字符。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">char text=<span class="hljs-string">&#x27;\x41&#x27;</span>; //十六进制ASCII码表示 A 字符<br>char text=0x41; //十六进制数值表示 A 字符<br>char text=<span class="hljs-string">&#x27;\101&#x27;</span>; //八进制ASCII码表示 A 字符<br>char text=0101; //八进制数值表示 A 字符<br></code></pre></div></td></tr></table></figure><div class="note note-danger">            <p>注意：在使用ASCII码或者进制数进行赋值时，语句结尾需要加上<span class="label label-info">;</span></p>          </div><h2 id="字符类型当中的其他函数"><a href="#字符类型当中的其他函数" class="headerlink" title="字符类型当中的其他函数"></a>字符类型当中的其他函数</h2><h3 id="关于getchar-函数"><a href="#关于getchar-函数" class="headerlink" title="关于getchar()函数"></a>关于getchar()函数</h3><p>&emsp;&emsp;接下来我们就回到一开始那个老哥的例程上。在例程当中，我们可以看见这几条语句：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ch=getchar();<br></code></pre></div></td></tr></table></figure><p>&emsp;&emsp;这条语句当中出现了<span class="label label-info">getchar()</span>这个函数，这个函数在C语言当中的作用是从计算机终端（一般为键盘）获取一个无符号字符。getchar()函数只能接收一个字符，其函数值就是从输入设备获取到的字符。<a href="https://baike.baidu.com/item/getchar%28%29/6876946?fr=aladdin">getchar()——百度百科</a></p><h3 id="关于putchar-函数"><a href="#关于putchar-函数" class="headerlink" title="关于putchar()函数"></a>关于putchar()函数</h3><p>&emsp;&emsp;同时我们在例程当中出现了这条语句：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">putchar(ch+32);<br></code></pre></div></td></tr></table></figure><p>&emsp;&emsp;这条语句当中出现了<span class="label label-info">putchar()</span>这个函数，这个函数的作用是把参数 char 指定的字符（一个无符号字符）写入到标准输出 stdout 中。</p><p>&emsp;&emsp;除此之外，我们还看见在括号里面出现<span class="label label-info">ch+32</span>.。</p><p>&emsp;&emsp;字符可以通过ASCII码进行四则运算：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,100+<span class="hljs-string">&#x27;A&#x27;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,100-<span class="hljs-string">&#x27;A&#x27;</span>);<br></code></pre></div></td></tr></table></figure><p>&emsp;&emsp;由于字符A的ASCII码为65，所以上面的运算出来的结果分别为165与35。</p>]]></content>
    
    
    <categories>
      
      <category>日常学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单片机学习笔记（3）</title>
    <link href="/2021/01/17/%E5%8D%95%E7%89%87%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%883%EF%BC%89/"/>
    <url>/2021/01/17/%E5%8D%95%E7%89%87%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%883%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="单片机学习之——运算符"><a href="#单片机学习之——运算符" class="headerlink" title="单片机学习之——运算符"></a>单片机学习之——运算符</h1><p>&emsp;&emsp;在了解完一些数据类型之后，接下来我们将学习如何使用运算符。</p><p>&emsp;&emsp;视频传送门：<a href="https://www.bilibili.com/video/BV15Q4y1K7Kg">C51单片机编程基础-运算符</a></p><h2 id="一、C51中常见的运算符"><a href="#一、C51中常见的运算符" class="headerlink" title="一、C51中常见的运算符"></a>一、C51中常见的运算符</h2><p>&emsp;&emsp;在C51当中，除了在C语言当中常见的运算符，还有一些之前接触较少的运算符，例如：</p><div class="note note-info">            <p>算数运算符：++<br>位运算符：&amp; | ^ ~ &lt;&lt; &gt;&gt;<br>逻辑运算符：&amp;&amp; || ！<br>三目录运算符：con?ture:false</p>          </div><h2 id="二、运算符用法"><a href="#二、运算符用法" class="headerlink" title="二、运算符用法"></a>二、运算符用法</h2><p>&emsp;&emsp;这里我们针对一些运算符进行说明：</p><h3 id="1、算数运算符：-（自增）"><a href="#1、算数运算符：-（自增）" class="headerlink" title="1、算数运算符：++（自增）"></a>1、算数运算符：++（自增）</h3><p>&emsp;&emsp;我们先看下面的示例代码：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#include&lt;stdio.h&gt;</span><br>int main()<br>&#123;<br>int a=10 ,b;<br>b=++a;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a=%d\nb=%d\n&quot;</span>,a,b);<br><span class="hljs-built_in">return</span> 0;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>&emsp;&emsp;在上面的代码当中的<span class="label label-primary">b=++a</span>的运算顺序是先进行运算，再进行赋值。即：</p><div class="note note-info">            <p>a=11<br>b=11</p>          </div><p>&emsp;&emsp;若是将语句<span class="label label-primary">b=++a</span>改为<span class="label label-primary">b=a++</span>则是先进行赋值，再进行运算，即：</p><div class="note note-info">            <p>a=10<br>b=11</p>          </div><h3 id="2、逻辑运算符：-amp-amp-（逻辑与）"><a href="#2、逻辑运算符：-amp-amp-（逻辑与）" class="headerlink" title="2、逻辑运算符：&amp;&amp;（逻辑与）"></a>2、逻辑运算符：&amp;&amp;（逻辑与）</h3><p>&emsp;&emsp;逻辑与运算遵循：“有0为0”</p>]]></content>
    
    
    <categories>
      
      <category>日常学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>单片机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单片机学习笔记（2）</title>
    <link href="/2021/01/16/%E5%8D%95%E7%89%87%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%882%EF%BC%89/"/>
    <url>/2021/01/16/%E5%8D%95%E7%89%87%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%882%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="单片机学习之——C51初识"><a href="#单片机学习之——C51初识" class="headerlink" title="单片机学习之——C51初识"></a>单片机学习之——C51初识</h1><p>&emsp;&emsp;在搞清楚进制转换之后，接下来就正式进入C51单片机的学习了，在学习的过程中会穿插一些关于C语言的一些知识，毕竟C51本身就是C语言的一种衍生与应用。接下来我将会按照哔哩哔哩上找的视频教程针对C51进行逐步的学习。</p><p>&emsp;&emsp;视频传送门：<a href="https://www.bilibili.com/video/BV1TA411b7bJ">C51单片机编程基础-变量</a></p><h2 id="一、C51的头文件"><a href="#一、C51的头文件" class="headerlink" title="一、C51的头文件"></a>一、C51的头文件</h2><p>&emsp;&emsp;我们先从程序框架来了解C51程序。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#include&lt;reg51.h&gt;   //头文件</span><br>int main(void)      //主函数，main函数<br>&#123;<br><br><span class="hljs-built_in">return</span> 0;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>&emsp;&emsp;这里的头文件分别有两种类型，一种是带有尖括号的叫做系统头文件，另一种是带有双引号的叫做自定义头文件。即：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">&lt;reg51.h&gt;           //系统头文件<br><span class="hljs-string">&quot;head.h&quot;</span>            //自定义头文件<br></code></pre></div></td></tr></table></figure><p>&emsp;&emsp;这意味着未来我们可以编写自己的头文件以用于我们自己写的程序。</p><h2 id="二、C51当中的数据类型"><a href="#二、C51当中的数据类型" class="headerlink" title="二、C51当中的数据类型"></a>二、C51当中的数据类型</h2><p>&emsp;&emsp;C语言当中常见的数据类型有以下几类：</p><div class="note note-info">            <p>char                字符型<br>int                 整型<br>long                长整型<br>float               单精度浮点型<br>double              双精度浮点型<br>unsigned char       无符号字符型<br>unsigned int        无符号整型<br>unsigned long       无符号长整型</p>          </div><p>&emsp;&emsp;然而在C51当中则还有以下几种常见的数据类型：</p><div class="note note-info">            <p>sfr                 特殊功能寄存器<br>sfr16               16位特殊功能寄存器<br>bit                 位类型<br>sbit                可寻址位</p>          </div><p>&emsp;&emsp;例：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sfr P0 = 0x80;      //定义P0为P0端口在片内的寄存器，P0端口地址为80H<br>sfr P0 = 0x90;      //定义P1为P1端口在片内的寄存器，P1端口地址为90H<br><br>sbit P1_1 = P1^1;   //P1_1为P1中的P1.1引脚<br>                    //这样在以后的程序语句中就可以用P1_1来对P1.1引脚进行读写操作<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>日常学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>单片机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单片机学习笔记（1）</title>
    <link href="/2021/01/16/%E5%8D%95%E7%89%87%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/"/>
    <url>/2021/01/16/%E5%8D%95%E7%89%87%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="单片机学习之——二进制与十六进制的互相转换"><a href="#单片机学习之——二进制与十六进制的互相转换" class="headerlink" title="单片机学习之——二进制与十六进制的互相转换"></a>单片机学习之——二进制与十六进制的互相转换</h1><p>&emsp;&emsp;经过一段时间的学习，终于把C语言的基础知识都大致过了一遍，接下来我将会进入单片机的学习。在这过程中偶尔会穿插一些C语言的知识，也算是一边学习单片机，一边复习C语言啦！</p><p>&emsp;&emsp;传送门：<a href="https://jingyan.baidu.com/article/47a29f24292608c0142399cb.html">二进制数与十六进制数之间如何互相转换</a></p><h2 id="十六进制数"><a href="#十六进制数" class="headerlink" title="十六进制数"></a>十六进制数</h2><h3 id="一、关于十六进制数"><a href="#一、关于十六进制数" class="headerlink" title="一、关于十六进制数"></a>一、关于十六进制数</h3><p>&emsp;&emsp;首先要先知道<a href="https://baike.baidu.com/item/%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6/4162457?fr=aladdin">十六进制</a>是什么并且如何表示。</p><p>&emsp;&emsp;一般来说，十六进制由数字0到9和字母A到F（或a到f）来表示。其中A到F依次表示数字10到15依次排开即：0、1、2、3、4、5、6、7、8、9、A、B、C、D、E、F，这些都称之为十六进制数。</p><h3 id="二、十六进制数与二进制数的关系"><a href="#二、十六进制数与二进制数的关系" class="headerlink" title="二、十六进制数与二进制数的关系"></a>二、十六进制数与二进制数的关系</h3><p>&emsp;&emsp;在十六进制的世界里，一个十六进制数字会等于四个二进制数字。</p><p>&emsp;&emsp;如下所示：</p><div class="note note-info">            <p>0 –&gt; 0000<br>1 –&gt; 0001<br>2 –&gt; 0010<br>3 –&gt; 0011<br>4 –&gt; 0100<br>5 –&gt; 0101<br>6 –&gt; 0110<br>7 –&gt; 0111<br>8 –&gt; 1000<br>9 –&gt; 1001<br>A –&gt; 1010<br>B –&gt; 1011<br>C –&gt; 1100<br>D –&gt; 1101<br>E –&gt; 1110<br>F –&gt; 1111</p>          </div><p>&emsp;&emsp;在上方的一组数当中，左侧为二进制数字，右侧为十六进制数。对于右侧的二进制数而言，从右往左看，每一位所表示的大小依次为：1、2、4、8</p><p>&emsp;&emsp;而在右侧的二进制数字当中的“0”与“1”则代表了物理上的开与关，由此可见针对单片机的编程事实上是需要在硬件底层具有一定的理解。在一个开发板上的单片机程序，在其他型号的开发板上就并不适用了。</p><p>&emsp;&emsp;这一篇文章就写到这儿。</p>]]></content>
    
    
    <categories>
      
      <category>日常学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>单片机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言学习笔记（3）</title>
    <link href="/2020/12/13/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%883%EF%BC%89/"/>
    <url>/2020/12/13/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%883%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>&emsp;&emsp;今天再说说新的东西吧！</p><h2 id="一、关于switch函数的使用"><a href="#一、关于switch函数的使用" class="headerlink" title="一、关于switch函数的使用"></a>一、关于switch函数的使用</h2><p>&emsp;&emsp;同样的，让我们先看一看示例代码：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#include&lt;stdio.h&gt;</span><br>int main()<br>&#123;<br>   int a,b,sum;<br>   char d;<br>   scanf(<span class="hljs-string">&quot;%d %d %c&quot;</span>, &amp;a, &amp;b, &amp;d); <br>   switch(d) <br>   &#123;<br>   <span class="hljs-keyword">case</span><span class="hljs-string">&#x27;+&#x27;</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, a + b); <span class="hljs-built_in">break</span>;<br><span class="hljs-keyword">case</span><span class="hljs-string">&#x27;-&#x27;</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, a - b); <span class="hljs-built_in">break</span>;<br><span class="hljs-keyword">case</span><span class="hljs-string">&#x27;*&#x27;</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, a * b); <span class="hljs-built_in">break</span>;<br><span class="hljs-keyword">case</span><span class="hljs-string">&#x27;/&#x27;</span>:<br><span class="hljs-keyword">if</span>(b == 0)<br>&#123;<br>          <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Divided by zero!&quot;</span>);<br>        &#125; <br> <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, a / b);<span class="hljs-built_in">break</span>;<br>default : <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Invalid operator!&quot;</span>); <span class="hljs-built_in">break</span>;<br>   &#125;<br>   <span class="hljs-built_in">return</span> 0;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>&emsp;&emsp;上面的代码有用switch语句和if……else判断语句的嵌套复合，这里我们只讨论switch语句功能。</p><p>&emsp;&emsp;“switch”是开关的意思，大致框架如下：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">switch<br>&#123;<br><span class="hljs-keyword">case</span> 常量表达式:语句块;//这里的语句块是指类似于“<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,a)”这样的句子<br><span class="hljs-built_in">break</span>;<br>……//这里的省略号表示可以反复循环3和4语句<br>default: 语句块；<br><span class="hljs-built_in">break</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>&emsp;&emsp;这里的<code>case</code>之后的语句将作为判断的条件，当碰到<code>break;</code>时，程序将跳过之后语句块，也就是说，程序在运行过程中会与每一个“case”语句的条件进行判定。若没有遇到符合条件，则会继续执行程序。就算匹配到符合条件，如果没有遇到“break”，则继续执行程序，反之则跳出“seitch”语句判断，即<code>break;</code>以下语句不执行。</p><p>&emsp;&emsp;当然了，当所有<code>case</code>都不满足相应的条件时，那么计算机则会执行<code>default</code>中的代码。</p><p>&emsp;&emsp;<code>default</code>称为“缺省值”。在switch语句当中可有可无，执行到后面的“break”时跳出switch判断。</p><p>&emsp;&emsp;这里推荐一篇文章，讲的更为细致：<a href="http://c.biancheng.net/view/310.html">switch语句用法注意事项，如何正确使用switch语句？</a></p><h2 id="二、关于平方根的计算"><a href="#二、关于平方根的计算" class="headerlink" title="二、关于平方根的计算"></a>二、关于平方根的计算</h2><p>&emsp;&emsp;虽然在上上期我介绍了两种在C语言中次方计算的方法，但是今天还是要补充一下另一种平方根的计算方式。</p><p>&emsp;&emsp;sprt函数可用于在C语言计算一个非负实数的平方，在使用的过程中同样的用如下形式。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sprt(<span class="hljs-string">&quot;在此处填入相应的变量名&quot;</span>)<br></code></pre></div></td></tr></table></figure><p>&emsp;&emsp;今天就说到这儿吧……明天再说。</p>]]></content>
    
    
    <categories>
      
      <category>日常学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言学习笔记（2）</title>
    <link href="/2020/12/12/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%882%EF%BC%89/"/>
    <url>/2020/12/12/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%882%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>&emsp;&emsp;今天的心得并不多，但是我还是觉得很有必要记录一下。</p><h2 id="一、一个数的n次方是属于double型的"><a href="#一、一个数的n次方是属于double型的" class="headerlink" title="一、一个数的n次方是属于double型的"></a>一、一个数的n次方是属于double型的</h2><h2 id="二、使用if……else-if……else语句作逻辑判断"><a href="#二、使用if……else-if……else语句作逻辑判断" class="headerlink" title="二、使用if……else if……else语句作逻辑判断"></a>二、使用if……else if……else语句作逻辑判断</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#include&lt;stdio.h&gt;</span><br>int main()<br>&#123;<br>int a,b,max;<br>scanf(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);<br><span class="hljs-keyword">if</span>(a&gt;b)<br>&#123;<br>max=a;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,max); <br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(b&gt;a)<br>&#123;<br>max=b;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,max);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;两个数字相等&quot;</span>);<br>&#125;<br><span class="hljs-built_in">return</span> 0;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>&emsp;&emsp;上面的代码目的是比较两个整数的大小，首先输入两个整数值，从上面的<code>if(a&gt;b)</code>就开始了if判断。其中这段代码：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-keyword">if</span>(a&gt;b)<br>&#123;<br>max=a;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,max);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>&emsp;&emsp;这是先判断a与b哪一个大，当a大于b的时候，max这个变量名的数值就会等于a的数值，然后就会把a的值作为最大值输出。这里说明一下，max是在上面就定义的一个变量名，顾名思义是用来存储最大值的。</p><p>&emsp;&emsp;让我们看看下一段代码：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(b&gt;a)<br>&#123;<br>max=b;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,max);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>&emsp;&emsp;在这段代码中，<code>lese if</code>是指当<code>if(&quot;这里是表达式&quot;)</code>也就是if之后的括号里的条件不成立的时候，此时计算机会进行下一步的判断，会判断else if之后的括号里的条件是否成立。在上面的代码中，当a小于b时，接下来计算机就会做出如上判断。当b&gt;a时，b的数值会被赋予max,然后就会把b的值作为最大值输出。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;两个数字相等&quot;</span>)；<br>&#125;<br></code></pre></div></td></tr></table></figure><p>&emsp;&emsp;上面的这段代码是当if以及else if两次判断都无法判断出结果，只剩下唯一的可能性时，所做出的最后判断。众所周知，两个数字比较大小一共有三种情况：</p><p>&emsp;&emsp;a&gt;b<br>&emsp;&emsp;a&lt;b<br>&emsp;&emsp;a=b</p><p>&emsp;&emsp;同样的，我们先看一下示例代码：在示例代码中，if和else if两个语句分别将a&gt;b和b&gt;a两种情况都讨论完了，只剩下a=b的条件尚未讨论，此时else语句后面就不用加此判定条件。因为计算机会默认认为else的判断条件就是剩下的最后的一个可能性。</p><p>&emsp;&emsp;所以最后一段代码的意思是，当a=b时，将直接输出printf函数中的“两个数字相等”。</p><h2 id="三、if判断语句中“-”的使用"><a href="#三、if判断语句中“-”的使用" class="headerlink" title="三、if判断语句中“=”的使用"></a>三、if判断语句中“=”的使用</h2><p>&emsp;&emsp;同样的，我们先看一下示例代码：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#include&lt;stdio.h&gt;</span><br>int main()<br>&#123;<br>int N;<br>scanf(<span class="hljs-string">&quot;%d&quot;</span>,&amp;N);<br><span class="hljs-keyword">if</span>(N&gt;0)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;positive&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(N==0)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;zero&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;negative&quot;</span>);<br>&#125;<br><span class="hljs-built_in">return</span> 0;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>&emsp;&emsp;上面的这段代码目的是判断“N”这个数字的正负性。细心的同学会看见在这段代码中有这样一个现象：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(N==0)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;zero&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>&emsp;&emsp;在上面的这段代码中，你会发现在<code>else if(N==0)</code>里面，“N”的后面有两个等于号。这里强调一下，在if语句作等于判断的时候，需要在括号里填上两个等于号。这段语句所要判断的是“N”会不会等于“0”，如果等于，则输出printf函数里的“zero”。具体为什么要加两个“=”呢？可以理解为把“=”的赋值功能与之区别。如果将“N”后面的“=”缩减为一个，那么计算机则会认为你将N赋值为0，即N=0。</p><p>&emsp;&emsp;今天就写到这儿，明天再说吧！</p>]]></content>
    
    
    <categories>
      
      <category>日常学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言学习日记(1)</title>
    <link href="/2020/12/11/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0%EF%BC%881%EF%BC%89/"/>
    <url>/2020/12/11/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0%EF%BC%881%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>&emsp;&emsp;今天谈谈在学习C语言的时候碰到的一些问题，这里在博客上做一点简单的记录。</p><h2 id="一、关于scanf函数"><a href="#一、关于scanf函数" class="headerlink" title="一、关于scanf函数"></a>一、关于scanf函数</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">scanf();<br></code></pre></div></td></tr></table></figure><p>&emsp;&emsp;在使用Scanf函数的时候，遇到输入空格、回车、Tab键时，都是默认当前的字符输入结束，此时电脑并不会将以上的三种情况算作你输入的值。这里要多说一句，如果你发现程序运行结束之后，返回的结果是空值（也就是啥都没有），那就要先检查一下你的scanf里面的变量名，前面有没有加上“&amp;”（取地址符）。</p><p>&emsp;&emsp;在使用scanf语句需要在输入时加入提示文字时，需要在scanf的前面用printf语句输出相关的提示语句。因为在c语言当中，scanf语句的功能规定为将用户输入的数值、字符或者字符串传送给相应的变量。</p><h2 id="二、关于C语言中的次方运算"><a href="#二、关于C语言中的次方运算" class="headerlink" title="二、关于C语言中的次方运算"></a>二、关于C语言中的次方运算</h2><p>&emsp;&emsp;首先要说明的是，在C语言中作乘法计算，计算机不识别“ ^ ”运算符。下面介绍两种常见的次方运算方式：</p><h3 id="1、调用math-h头文件，利用pow-函数解决"><a href="#1、调用math-h头文件，利用pow-函数解决" class="headerlink" title="1、调用math.h头文件，利用pow()函数解决"></a>1、调用math.h头文件，利用pow()函数解决</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#include&lt;stdio.h&gt;</span><br><span class="hljs-comment">#include&lt;math.h&gt;</span><br>int main()<br>&#123;<br>int a,b;<br>scanf(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a);<br>b=pow(a,2);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,b);<br><span class="hljs-built_in">return</span> 0;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>&emsp;&emsp;上面那一行代码主要目的是计算你输入的“a”的平方。在上面的代码块当中，我们定义了两个整型变量a和b。当程序运行至<code>scanf(&quot;%d&quot;,&amp;a)</code>时,我们在程序框内输入一个数，计算机会把该数的值赋予a，使得a会等于我们输入的数值。此时程序运行下一步，pow函数就是用来计算a的平方，并且将结果赋予b,最后输出结果。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">pow(<span class="hljs-string">&quot;这里输入被平方的数，一般是变量名&quot;</span>，<span class="hljs-string">&quot;这里输入次方数&quot;</span>)<br></code></pre></div></td></tr></table></figure><p>&emsp;&emsp;这个方法适用于高阶次方运算。</p><h3 id="2、使用连乘的方式"><a href="#2、使用连乘的方式" class="headerlink" title="2、使用连乘的方式"></a>2、使用连乘的方式</h3><p>&emsp;&emsp;这个方法相对而言就简单很多，同样的以上面的代码为例：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#include&lt;stdio.h&gt;</span><br>int main()<br>&#123;<br>int a,b;<br>scanf(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a);<br>b=a*a;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,b);<br><span class="hljs-built_in">return</span> 0;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>&emsp;&emsp;这种算法就是明显的数学问题了，这里就不在多说。不过值得一提的是，当计算简单的加减乘除的时候，程序不需要加上<code>&lt;math.h&gt;</code>这个头文件。当然，如果需要计算复杂一点的式子，比如用上面的pow函数计算次方，那你就需要用上<code>&lt;math.h&gt;</code>这个头文件了。</p><h2 id="三、用define定义一个常数"><a href="#三、用define定义一个常数" class="headerlink" title="三、用define定义一个常数"></a>三、用define定义一个常数</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#include&lt;stdio.h&gt;</span><br><span class="hljs-comment">#define a 1</span><br></code></pre></div></td></tr></table></figure><p>&emsp;&emsp;上面的define就是用来定义一个常量，在定义之后，下面的程序中a就会等于1，不需要再另外作出定义。</p><p>&emsp;&emsp;以上就是我的一些心得，注意，由于博主是一名刚刚初学C语言的学生，可能会在理解上或者概念上出现一些问题，所以以上内容仅供参考。</p>]]></content>
    
    
    <categories>
      
      <category>日常学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello world</title>
    <link href="/2020/12/09/Hello%20world/"/>
    <url>/2020/12/09/Hello%20world/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/img/Old-blog.png"><br>&emsp;&emsp;上面那张图是我在高三的时候建立的博客，当时用的还是<a href="https://gridea.dev/">Gridea</a>推送+<a href="https://coding.net/">Coding page</a>代码托管，进行静态博客搭建。这是也我目前所能够了解到的最为简单快速的搭建方式。前阵子想尝试用Hexo重新建立一个静态博客，也算是给我的博客翻新了。结果一不小心将Coding上存放我博客文件的仓库删掉了。最后不得不将建立静态博客这一议程提前进行。</p><p>&emsp;&emsp;其实一开始是打算用<a href="https://hexo.io/zh-cn/">Hexo</a>+coding部署的，直到昨天我还在坚持这一想法。但由于部署过程频频报错，有时候甚至连错误信息都没有，查了很多资料都无解。最后实在是受不了了，才用Hexo+<a href="https://github.com/">Github</a>部署我的博客。这里对后面想要建立静态博客的朋友们提个建议——在短时间内，最好用Hexo+Github的方式来搭建自己的静态博客。</p><p>&emsp;&emsp;还在念初中的时候突发奇想，寻思着要建立一个网站，搭建一个论坛式的网络平台。苦于当时的我还没有本事从头开始码代码，但凭借着这一时的冲动，直接买了一本搭建网站的教程，打算从头开始学。当时我把我的想法告诉了几个好哥们。几个人都对我摇了摇头，一致认为我的想法难以实现。现在想来确实如此，毕竟仅凭一时的热情，很难实现这一目标。</p><p>&emsp;&emsp;再后来到了高中那会儿，偶然的在酷安上看到一篇依托Coding page加上Hexo静态博客框架建立静态博客的教程。那时也是抱着尝试的心理，看着教程的步骤，从安装环境开始，一步一步执行教程中的命令。但是无论如何尝试，总是会有报错信息，到最后连查资料也没用了。放弃了之后又找到了Gridea,这里不得不说Gridea的可视化界面对小白真的是极其友好，然后就有了博文开头的那张图。但是鉴于Gridea的适配主题少的可怜，于是前几天我又不得不用Coding+Github来搭建我的博客。虽然界面简单，但这对于极少实现目标的我而言，已经是莫大的成功了。</p><p>&emsp;&emsp;一直以来，只要是我认定想要做的事情，似乎总是以失败而告终。每当我和别人谈起我的想法时，要么觉得太过于困难，难以实现。要么就觉得没有必要。以至于在很长的一段时间里，我在不停的反思自己，自己对待事物时是不是太过于理想化，以至于在现实世界中无法实现。</p><p>&emsp;&emsp;一路走来，我遇到过别人不带掩饰的嘲讽和质疑。这里要对一直以来相信并支持我的老师同学、家人朋友说一句谢谢！当然了，对于曾经那些质疑与嘲讽过我的人，我想说，我现在过的很好，曾经你们说的那些我做不到的或者不应该做到的事情我都在一个一个努力的实现。</p><p>&emsp;&emsp;最让我沮丧的莫过于在兴高采烈地将想法告诉别人时，别人冷不丁地给你来一句“不可能”。虽然在心里也直到自己就这副德行，有着大半辈子摆脱不了的惰性，智商也是低的让人心疼。但与之相配的，我有着天生的固执性格，这也是我在沮丧之余为数不多的能够感到安慰的方面。我不愿意放弃事物的每一个可能性，每当别人劝我“你做不到的，放弃吧！”的时候，我反而会坚定自己的想法。这里要承认我的固执有时候也会伤害到身边的人，这里要向曾被我伤害过的人说一句抱歉！</p><p>&emsp;&emsp;对于我而言，机会很快就稍纵即逝，可能对于你们而言，这些事情都是微不足道的，不值一提。但是我害怕失去，失去那些我本可以触碰到的东西。有时你们可以轻而易举的获得你们想要的东西，但是我不能，或者很难做到，所以迫不得已需要付出更多的精力去获得那些我想要的东西。</p><p>&emsp;&emsp;值得一提的是，在大学同学的支持下，初中那时的想法正在逐渐实现。未来充满了各种的未知，我不知道下一次的失败是在什么时候。但有一点是显而易见的，那就是我已经从零开始向前迈出了第一步。这一点是着实让我感到惊喜的，我更喜欢这种从无到有不停创造的过程。曾经我对我的高中的同学们说过，不管我以后到了哪所大学，读的怎么样，关键是要实现自己的价值（似乎还听到后面有人笑了一声）╮(╯-╰)╭但是我确信我在实践着我说的话，至于实现与否当然就不是我能左右了嘛……</p><p>&emsp;&emsp;不管怎么说，还是要脚踏实地地走好人生的每一步。随着我渐渐地成长，曾经的那些不成熟的想法已经成为了我尘封的回忆，等待着我哪天终于停下了急促的脚步，坐下来仔细回味着那些过去的稚嫩。未来的我要变得更成熟些，免得又提出一些幼稚的想法被人笑话(￣、￣)</p><p>&emsp;&emsp;借着我新博客的发布，就把这作为一个契机，或者说是一个起点吧！</p><p>#include&lt;stdio.h&gt;<br>int main()<br>{<br>printf(“Hello world.I’m comming!”);<br>return 0;<br>}</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
